akka { 
  # Loggers to register at boot time (akka.event.Logging$DefaultLogger logs
  # to STDOUT)
  loggers = ["akka.event.Logging$DefaultLogger"]
  
  # Log level used by the configured loggers (see "loggers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "WARNING"
 
  # Log level for the very basic logger activated during ActorSystem startup.
  # This logger prints the log messages to stdout (System.out).
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  stdout-loglevel = "WARNING"
  
  actor {
    provider = "akka.remote.RemoteActorRefProvider"
#    deployment {
#      /user/clients {
#      	dispatcher = client-thread-pool-dispatcher
#      }
#      "/foreman/*" {
#	    dispatcher = foreman-thread-pool-dispatcher
#	  }
#      "/coordinator/*" {
#	    dispatcher = update-worker-thread-pool-dispatcher
#	  }
#      /user/coordinator {
#	    dispatcher = coordinator-pinned-dispatcher
#	  }
#    }   
#    debug {
#      autoreceive = off
#      lifecycle = off
#    } 
  }
  
  remote {
    enabled-transports = ["akka.remote.netty.tcp"]
    netty.tcp {
      hostname = 127.0.0.1
      port = 2552
      tcp-nodelay = on
    }
    log-remote-lifecycle-events = off
    log-sent-messages = off
    log-received-messages = off
  }
}

client-thread-pool-dispatcher {
  # Dispatcher is the name of the event-based dispatcher
  type = Dispatcher
  # What kind of ExecutionService to use
  executor = "thread-pool-executor"
  # Configuration for the thread pool
  thread-pool-executor {
    # minimum number of threads to cap factor-based core number to
    core-pool-size-min = 2
    # No of core threads ... ceil(available processors * factor)
    core-pool-size-factor = 4.0
    # maximum number of threads to cap factor-based number to
    core-pool-size-max = 50
  }
  # Throughput defines the maximum number of messages to be
  # processed per actor before the thread jumps to the next actor.
  # Set to 1 for as fair as possible.
  throughput = 1
}

foreman-thread-pool-dispatcher {
  # Dispatcher is the name of the event-based dispatcher
  type = Dispatcher
  # What kind of ExecutionService to use
  executor = "thread-pool-executor"
  # Configuration for the thread pool
  thread-pool-executor {
    # minimum number of threads to cap factor-based core number to
    core-pool-size-min = 20
    # No of core threads ... ceil(available processors * factor)
    core-pool-size-factor = 4.0
    # maximum number of threads to cap factor-based number to
    core-pool-size-max = 50
  }
  # Throughput defines the maximum number of messages to be
  # processed per actor before the thread jumps to the next actor.
  # Set to 1 for as fair as possible.
  throughput = 100
}

update-worker-thread-pool-dispatcher {
  # Dispatcher is the name of the event-based dispatcher
  type = Dispatcher
  # What kind of ExecutionService to use
  executor = "thread-pool-executor"
  # Configuration for the thread pool
  thread-pool-executor {
    # minimum number of threads to cap factor-based core number to
    core-pool-size-min = 20
    # No of core threads ... ceil(available processors * factor)
    core-pool-size-factor = 4.0
    # maximum number of threads to cap factor-based number to
    core-pool-size-max = 50
  }
  # Throughput defines the maximum number of messages to be
  # processed per actor before the thread jumps to the next actor.
  # Set to 1 for as fair as possible.
  throughput = 1
}

coordinator-pinned-dispatcher {
  executor = "thread-pool-executor"
  type = PinnedDispatcher
  throughput = 100
}